var uuid = require('node-uuid');
var cradle = require('cradle');

var conn=new(cradle.Connection)('https://couchdbserver', 443, {
      auth: { username: 'user', password: 'password' }
  });

var users = conn.database("js_ugr_users");
var docs = conn.database("js_ugr_docs");
var cache = conn.database('js_ugr_usercache');

var nodemailer = require("nodemailer");

// create reusable transporter object using the default SMTP transport
var smtpTransport = nodemailer.createTransport({
    host: 'correo.ugr.es',
    port: 587,
    secure: false, // true for 465, false for other ports
    auth: {
        user: "user", 
        pass: "pass" 
    }
});

var crypto = require('crypto');
var sha256=require('sha256');
var jsUgrSessions=require('jsUgrSessions');


module.exports =
{	
sendValidation: function(mail){
	return function(callback){

		//create a validation code
		crypto.randomBytes(16, function(ex, buf) {
			code = buf.toString('hex');
			//send validation email
			smtpTransport.sendMail({
			   from: "JS UGR <vroom@correo.ugr.es>", 
			   to: mail.user+"<"+mail.email+">", 
			   subject: mail.head, 
			   text: mail.body+code+"\n\nor copy your code: "+code
			}, function(error, response){
				if(error){ //if mailer returns error
					callback({ok: false, error: "Mailer returned error", reason: error});
				}else{//if mailer succeeds
					callback({ok: true, code: code});
				}
			});							
		});	
	}
},

deleteUser: function(user){	
return function(callback){
		users.get(user, function (err, doc) {
			if (err) {
				callback({ok: false, error: err.error, reason: err.reason});
			}else{
				users.remove(doc._id, doc._rev,function(err,resp){
					if (err) {
						callback({ok: false, error: err.error, reason: err.reason});
					}else{
						callback({ok: true, user: user});
					}
				});
			}
		});
	}
},

register: function(data){
	return function(callback){
		var now=new Date();	
		var response={};
		//ask the server for the user file to check existence
		users.get(data.user, function (err, doc) {
			if (err) { //if there is an error
				if(err.error=="not_found"){ //if the error is that the file is not found (=user doesn't exist)
					module.exports.sendValidation({user: data.user, email:data.email, head: "Verification JS UGR "+data.user, body: "You started the registration process at JS UGR. \nIf you didn't send this request please ignore this email.\n To complete the process follow this link http://aap.no-ip.info/userMgmt/confirmation.html?user="+data.user+"&code=" })(function(response){
						if(response.ok){
							users.save(data.user,{pass: sha256(data.pass), email: data.email, validated: false, code: response.code, registered: now, expiration: now.getTime()},function(err){
								if (err) { //if saving returns error
									callback({ok: false, error: err.error, error: err.reason});
								}else{//else return ok 
									callback({ok: true});
								}
							});
						}else{	
							callback(response);
						}									
					});	
				}else{ //the database error is other than a missing document 
					callback({ok: false, error: err.error, error: err.reason});
				}
			}else{ //the user document already exists
				if(doc.validated){
					callback({ok: false, error: "Registration error", reason: " User allready exists. <a href='pwReset.html'>recover password</a>"});	
				}else{
					callback({ok: false, error: "Registration error", reason: "User exists but is not validated. <a href='confirmation.html'>validate</a>"});				
				}
			}
		});
	}
},

confirm: function(data,ip){
	return function(callback){
		var now=new Date();	
		users.get(data.user, function (err, doc) {
			if (err) { 
				if(err.error=="not_found"){//if error is that user doc does not exist
					callback({ok: false, error: "Confirmation error", reason: "User does not exist"});
				}else{//other errors
					callback({ok: false, error: err.error, error: err.reason});
				}
			}else{ //if no error
				// if code is not expired
				if((now.getTime()-doc.expiration)<15*60*1000){
					//if code sent is the same as code in users database
					if(data.code==doc.code){
						//validate user
						doc.validated=true;	
						crypto.randomBytes(16, function(ex, buf) {
							doc.code = buf.toString('hex');
							//send modified file
							users.save(data.user,doc,function(err){
								if (err) { //if saving returns error
									callback({ok: false, error: err.error, error: err.reason});
								}else{//else login and return ok 
									docs.save('_design/'+data.user, {
										views: {
										 		"titles": {
												 			"map": "function(doc) { if(doc.user=='"+data.user+"'){ emit(doc.title, doc.time);}}"
										 		}
										}
									});
									var clave = uuid.v1();
									docs.save('template1 '+clave, {
										user: data.user,
										library: "",
										title:  "template 1",
										html: "<html>\n\t<head>\n\t\n\t</head>\n\t<body>\n\t\n\t</body>\n</html>",
										css: "",
										js: ""
									});
									docs.save('template2 '+clave, {
										user: data.user,
										library: "",
										title:  "template 2",
										html: "<html>\n\t<head>\n\t\n\t</head>\n\t<body>\n\t\n\t</body>\n</html>",
										css: "",
										js: ""
									});
									docs.save('template3 '+clave, {
										user: data.user,
										library: "",
										title:  "template 3",
										html: "<html>\n\t<head>\n\t\n\t</head>\n\t<body>\n\t\n\t</body>\n</html>",
										css: "",
										js: ""
									});
									cache.save(data.user, {lastLogin: now});
									
									//send affirmative response
									crypto.randomBytes(16, function(ex, buf) {
										code = buf.toString('hex');
										jsUgrSessions.users[data.user]={lastAction: now.getTime(), token: code};
										callback({ok: true, user: data.user, token: code});
									});
								}
							});
						});
					}else{
						var remaining=(15*60000+doc.expiration-now.getTime())/60000+1;
						remaining=remaining+" ";
						remaining=remaining.split(".");
						if(remaining.length>1)
							remaining=remaining[0];
						callback({ok: false, error: "Confirmation error",reason: "Wrong code. Try again or wait "+remaining+" min. to restart process."});	
					}
				}else{//if codes are different
					module.exports.deleteUser(data.user)(function(response){
						users.compact();
						if(response.ok){
							callback({ok: false, error: "Confirmation error",reason: "Code expired. <a href='register.html'>restart process</a>"});
						}else{
							callback(response);
						}
					});
				}
			}
		});
	}
},

pwdRequest: function(data){
	return function(callback){
		var now=new Date();	
		//ask the server for the user file to check existence
		users.get(data.user, function (err, doc) {
			if (err) { //if there is an error
				
				if(err.error=="not_found"){ //if the error is that the file is not found (=user doesn't exist)
					callback({ok: false, error: "Pwd reset error", reason: "User does not exist"});
				}else{ //the database error is other  
					callback({ok: false, error: err.error, error: err.reason});	
				}

			}else{ //the user document exists
				module.exports.sendValidation({user: data.user, email: doc.email, head: "Pw Recover JS UGR "+data.user, body: "You started the password recovery procedure at JS UGR.\nIf you didn't send this request please ignore this email.\n To complete the process follow this link http://aap.no-ip.info/userMgmt/pwConfirm.html?user="+data.user+"&code=" })(function(response){
					if(response.ok){
						doc.code=response.code;
						doc.expiration=now.getTime();
						users.save(data.user,doc,function(err){
							if (err) { //if saving returns error
								callback({ok: false, error: err.error, error: err.reason});
							}else{//else return ok 
								callback({ok: true});
							}
						});
					}else{	
						callback(response);
					}						
				});	
			}	
		});
	}
},

pwdConfirm: function(data,ip){
var now=new Date();	
	return function(callback){
		//get user doc
		users.get(data.user, function (err, doc) {
			if (err) { 
				if(err.error=="not_found"){//if user doc does not exist
					callback({ok: false, error: "Pwd reset error", reason: "User does not exist"});
				}else{
					callback({ok: false, error: err.error, error: err.reason});
				}
			}else{ //if no error
				//if code sent is the same as code in users database
				if(data.code==doc.code){
					if((now.getTime()-doc.expiration)<15*60*1000){
						crypto.randomBytes(16, function(ex, buf) {
							// change one-use code
							doc.code = buf.toString('hex');						
							//save new password
							doc.pass=sha256(data.pass);	
							//send modified file
							users.save(data.user,doc,function(err){
								if (err) { //if saving returns error
									callback({ok: false, error: err.error, error: err.reason});
								}else{//else return ok 
									//send affirmative response and store last login into cache 
									cache.get(data.user,function(err,doc){
										var last=doc.lastLogin;
										if (!err) {
											doc.lastLogin=now;
											cache.save(data.user,doc);
										}
										//send affirmative response
										crypto.randomBytes(16, function(ex, buf) {
											code = buf.toString('hex');
											callback({ok: true, token: code, user: data.user,lastLogin: last});
											jsUgrSessions.users[data.user]={lastAction: now.getTime(), token: code};
										});								
									});
								}
							});
						});
					}else{
						callback({ok: false, error: "Pwd reset error", reason: "Code expired. Restart process"});
					}
				}else{//if codes are different
					callback({ok: false, error: "Pwd reset error", reason: "Wrong code. Try again or restart process"});
				}
			}
		});
	}
}
};
